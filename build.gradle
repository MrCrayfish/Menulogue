plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
	id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.mod_id}-fabric"
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

configurations {
	implementation.extendsFrom library
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.getRelease().set(17)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE_MENULOGUE") {
		rename { "LICENSE_${project.mod_id}"}
	}
	from("LICENSE_MODMENU") {
		rename { "LICENSE_modmenu"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			artifact remapJar
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			pom.withXml {
				def depsNode = asNode().appendNode('dependencies')
				[this.configurations.library].each {
					it.allDependencies.each {
						def depNode = depsNode.appendNode('dependency')
						depNode.appendNode('groupId', it.group)
						depNode.appendNode('artifactId', it.name)
						depNode.appendNode('version', it.version)
					}
				}
			}
		}
	}

	repositories {
		if (System.getenv("CI")) {
			maven {
				name = "GitHubPackages"
				url = "https://maven.pkg.github.com/MrCrayfish/Maven"
				credentials {
					username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
					password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
				}
			}
		} else {
			maven {
				url "file://" + System.getenv("LOCAL_MAVEN")
			}
		}
	}
}

signing {
	if (System.getenv("SIGNING_KEY")) {
		def signingKey = System.getenv("SIGNING_KEY")
		def signingPassword = System.getenv("SIGNING_PASSPHRASE")
		useInMemoryPgpKeys(signingKey, signingPassword)
	}
	sign publishing.publications.mavenJava
}

task incrementBuild {
	doLast {
		int version = file('/release_build').text.toInteger()
		file('/release_build').text = version + 1
	}
}
